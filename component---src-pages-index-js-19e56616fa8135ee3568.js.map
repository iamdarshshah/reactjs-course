{"version":3,"sources":["webpack:///./src/components/TOCCard.js","webpack:///./src/pages/index.js","webpack:///./src/util/helpers.js"],"names":["LessonCard","content","title","sections","map","lesson","node","frontmatter","sort","sorter","reduce","acc","length","section","split","push","sx","variant","bg","px","py","borderRadius","listStyle","p","key","my","path","to","IndexPage","query","render","props","mb","fontSize","site","siteMetadata","subtitle","allMarkdownRemark","edges","splitSections","str","test","Error","exec","getCharScore","char","index","charCodeAt","score","module","exports","a","b","aOrder","bOrder","attributes","order","aSec","aSub","bSec","bSub"],"mappings":"+JAwDeA,EAnDI,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACvBC,EAAWF,EACdG,KAAI,SAAAC,GAAM,OAAIA,EAAOC,KAAKC,eAC1BC,KAAKC,UACLC,QAAO,SAACC,EAAKN,GACZ,OAAKM,EAAIC,QAKWD,EAAIA,EAAIC,OAAS,GAAG,GAAGC,QAAQC,MAAM,KAAK,KAC1CT,EAAOQ,QAAQC,MAAM,KAAK,GAC5CH,EAAIA,EAAIC,OAAS,GAAGG,KAAKV,GAEzBM,EAAII,KAAK,CAACV,IAGLM,IAXLA,EAAII,KAAK,CAACV,IACHM,KAWR,IAEL,OACE,mBACEK,GAAI,CACFC,QAAS,qBACTC,GAAI,WACJC,GAAI,EACJC,GAAI,EACJC,aAAc,QAGhB,sBAAKnB,GACL,uBACE,kBAAIc,GAAI,CAAEM,UAAW,OAAQC,EAAG,IAC7BpB,EAASC,KAAI,SAAAS,GAAO,OACnB,kBAAIW,IAAKX,EAAQ,GAAGA,QAASG,GAAI,CAAES,GAAI,IACrC,sBAAKZ,EAAQ,GAAGA,SAChB,sBACGA,EAAQT,KAAI,SAAAC,GAAM,OACjB,kBAAImB,IAAKnB,EAAOqB,MACd,YAAC,IAAD,CAAMC,GAAItB,EAAOqB,MAAOrB,EAAOH,oBCKpC0B,UA5CG,kBAChB,YAAC,IAAD,CACEC,MAAK,aA0BLC,OAAQ,SAAAC,GAAK,OACX,uBACE,mBAAKf,GAAI,CAAEgB,GAAI,IACb,kBAAIhB,GAAI,CAAEiB,SAAU,KAAOF,EAAMG,KAAKC,aAAajC,OACnD,iBAAGc,GAAI,CAAEiB,SAAU,KAAOF,EAAMG,KAAKC,aAAaC,WAGpD,YAAC,EAAD,CACElC,MAAM,oBACND,QAAS8B,EAAMM,kBAAkBC,c,mBC1C3C,SAASC,EAAcC,GAIrB,IAHyB,cAGHC,KAAKD,GACzB,MAAM,IAAIE,MACLF,EADC,8GAKR,MAAO,CARc,OAQAG,KAAKH,GAAK,GAPV,UAO2BG,KAAKH,GAAK,IAG5D,IAAMI,EAAe,SAAAJ,GAAG,OACtBA,EACG1B,MAAM,IACNV,KAAI,SAACyC,EAAMC,GAAP,OAAiBD,EAAKE,WAAW,GAAhB,SAAqB,GAAMD,MAChDpC,QAAO,SAACC,EAAKqC,GAAN,OAAgBrC,EAAMqC,MAyBlCC,EAAOC,QAAQX,cAAgBA,EAC/BU,EAAOC,QAAQzC,OAxBf,SAAgB0C,EAAGC,GACjB,IAAIC,EAAQC,EAERH,EAAEI,YAAcJ,EAAEI,WAAWC,OAC/BH,EAASF,EAAEI,WAAWC,MACtBF,EAASF,EAAEG,WAAWC,QAEtBH,EAASF,EAAEK,MACXF,EAASF,EAAEI,OARO,MAWCjB,EAAcc,GAA5BI,EAXa,KAWPC,EAXO,OAYCnB,EAAce,GAA5BK,EAZa,KAYPC,EAZO,KAepB,OAAIH,IAASE,EACJF,EAAOE,EAITf,EAAac,GAAQd,EAAagB","file":"component---src-pages-index-js-19e56616fa8135ee3568.js","sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Link from \"gatsby-link\";\nimport { sorter } from \"../util/helpers\";\n\nconst LessonCard = ({ content, title }) => {\n  const sections = content\n    .map(lesson => lesson.node.frontmatter)\n    .sort(sorter)\n    .reduce((acc, lesson) => {\n      if (!acc.length) {\n        acc.push([lesson]);\n        return acc;\n      }\n\n      const lastSection = acc[acc.length - 1][0].section.split(\",\")[0];\n      if (lastSection === lesson.section.split(\",\")[0]) {\n        acc[acc.length - 1].push(lesson);\n      } else {\n        acc.push([lesson]);\n      }\n\n      return acc;\n    }, []);\n\n  return (\n    <div\n      sx={{\n        variant: \"containers.surface\",\n        bg: \"surface2\",\n        px: 4,\n        py: 2,\n        borderRadius: \"4px\"\n      }}\n    >\n      <h1>{title}</h1>\n      <div>\n        <ul sx={{ listStyle: \"none\", p: 0 }}>\n          {sections.map(section => (\n            <li key={section[0].section} sx={{ my: 3 }}>\n              <h2>{section[0].section}</h2>\n              <ol>\n                {section.map(lesson => (\n                  <li key={lesson.path}>\n                    <Link to={lesson.path}>{lesson.title}</Link>\n                  </li>\n                ))}\n              </ol>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default LessonCard;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport Card from \"../components/TOCCard\";\n\nconst IndexPage = () => (\n  <StaticQuery\n    query={graphql`\n      query HomepageTOC {\n        site {\n          siteMetadata {\n            title\n            subtitle\n            description\n            keywords\n          }\n        }\n        allMarkdownRemark(sort: { order: ASC, fields: [frontmatter___order] }) {\n          edges {\n            node {\n              id\n              frontmatter {\n                order\n                path\n                title\n                section\n                description\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={props => (\n      <div>\n        <div sx={{ mb: 3 }}>\n          <h1 sx={{ fontSize: 14 }}>{props.site.siteMetadata.title}</h1>\n          <p sx={{ fontSize: 10 }}>{props.site.siteMetadata.subtitle}</p>\n        </div>\n\n        <Card\n          title=\"Table of Contents\"\n          content={props.allMarkdownRemark.edges}\n        />\n      </div>\n    )}\n  />\n);\n\nexport default IndexPage;\n","function splitSections(str) {\n  const validSectionTest = /^\\d+[A-Z]+$/;\n  const numbersRegex = /^\\d+/;\n  const lettersRegex = /[A-Z]+$/;\n  if (!validSectionTest.test(str)) {\n    throw new Error(\n      `${str} does not match the section format. It must be <numbers><capital letters>, like 16A or 5F (case sensitive)`\n    );\n  }\n\n  return [numbersRegex.exec(str)[0], lettersRegex.exec(str)[0]];\n}\n\nconst getCharScore = str =>\n  str\n    .split(\"\")\n    .map((char, index) => char.charCodeAt(0) * 10 ** index)\n    .reduce((acc, score) => acc + score);\n\nfunction sorter(a, b) {\n  let aOrder, bOrder;\n\n  if (a.attributes && a.attributes.order) {\n    aOrder = a.attributes.order;\n    bOrder = b.attributes.order;\n  } else {\n    aOrder = a.order;\n    bOrder = b.order;\n  }\n\n  const [aSec, aSub] = splitSections(aOrder);\n  const [bSec, bSub] = splitSections(bOrder);\n\n  // sections first\n  if (aSec !== bSec) {\n    return aSec - bSec;\n  }\n\n  // subsections next\n  return getCharScore(aSub) - getCharScore(bSub);\n}\n\nmodule.exports.splitSections = splitSections;\nmodule.exports.sorter = sorter;\n"],"sourceRoot":""}