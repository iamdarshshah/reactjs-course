{"version":3,"sources":["webpack:///./src/util/helpers.js","webpack:///./src/templates/lessonTemplate.js"],"names":["splitSections","str","test","Error","exec","getCharScore","split","map","char","index","charCodeAt","reduce","acc","score","module","exports","sorter","a","b","aOrder","bOrder","attributes","order","aSec","aSub","bSec","bSub","sortFn","helpers","Template","props","data","markdownRemark","sections","allMarkdownRemark","edges","lesson","node","frontmatter","sort","html","findIndex","el","path","prevLink","sx","variant","to","title","nextLink","length","bg","p","borderRadius","m","date","dangerouslySetInnerHTML","__html","display","width","my","justifyContent","pageQuery"],"mappings":"4EAAA,SAASA,EAAcC,GAIrB,IAHyB,cAGHC,KAAKD,GACzB,MAAM,IAAIE,MACLF,EADC,8GAKR,MAAO,CARc,OAQAG,KAAKH,GAAK,GAPV,UAO2BG,KAAKH,GAAK,IAG5D,IAAMI,EAAe,SAAAJ,GAAG,OACtBA,EACGK,MAAM,IACNC,KAAI,SAACC,EAAMC,GAAP,OAAiBD,EAAKE,WAAW,GAAhB,SAAqB,GAAMD,MAChDE,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAMC,MAyBlCC,EAAOC,QAAQf,cAAgBA,EAC/Bc,EAAOC,QAAQC,OAxBf,SAAgBC,EAAGC,GACjB,IAAIC,EAAQC,EAERH,EAAEI,YAAcJ,EAAEI,WAAWC,OAC/BH,EAASF,EAAEI,WAAWC,MACtBF,EAASF,EAAEG,WAAWC,QAEtBH,EAASF,EAAEK,MACXF,EAASF,EAAEI,OARO,MAWCtB,EAAcmB,GAA5BI,EAXa,KAWPC,EAXO,OAYCxB,EAAcoB,GAA5BK,EAZa,KAYPC,EAZO,KAepB,OAAIH,IAASE,EACJF,EAAOE,EAITpB,EAAamB,GAAQnB,EAAaqB,K,oCCvC3C,0IAMMC,EAASC,SAEA,SAASC,EAASC,GAAQ,IAAD,EACMA,EAAMC,KAA5CC,EADgC,EAChCA,eAEAC,EAHgC,EAChBC,kBAEaC,MAChC5B,KAAI,SAAA6B,GAAM,OAAIA,EAAOC,KAAKC,eAC1BC,KAAKZ,GAEAW,EAAsBN,EAAtBM,YAAaE,EAASR,EAATQ,KAEf/B,EAAQwB,EAASQ,WAAU,SAAAC,GAAE,OAAIA,EAAGC,OAASL,EAAYK,QAEzDC,EACJnC,EAAQ,EACN,YAAC,IAAD,CAAMoC,GAAI,CAAEC,QAAS,kBAAoBC,GAAId,EAASxB,EAAQ,GAAGkC,MAC9D,KAAOV,EAASxB,EAAQ,GAAGuC,OAG9B,wBAGEC,EACJxC,EAAQwB,EAASiB,OAAS,EACxB,YAAC,IAAD,CAAML,GAAI,CAAEC,QAAS,kBAAoBC,GAAId,EAASxB,EAAQ,GAAGkC,MAC9DV,EAASxB,EAAQ,GAAGuC,MAAQ,MAG/B,wBAGJ,OACE,uBACE,mBACEH,GAAI,CACFM,GAAI,UACJC,EAAG,EACHN,QAAS,sBACTO,aAAc,QAGhB,kBAAIR,GAAI,CAAES,EAAG,IAAMhB,EAAYU,OAC/B,kBAAIH,GAAI,CAAES,EAAG,IAAMhB,EAAYiB,MAC/B,mBAAKC,wBAAyB,CAAEC,OAAQjB,MAE1C,mBACEK,GAAI,CACFa,QAAS,OACTC,MAAO,OACPC,GAAI,EACJC,eAAgB,kBAGjBjB,EACAK,IAMF,IAAMa,EAAS","file":"component---src-templates-lesson-template-js-2bb9e1341e0009a22374.js","sourcesContent":["function splitSections(str) {\n  const validSectionTest = /^\\d+[A-Z]+$/;\n  const numbersRegex = /^\\d+/;\n  const lettersRegex = /[A-Z]+$/;\n  if (!validSectionTest.test(str)) {\n    throw new Error(\n      `${str} does not match the section format. It must be <numbers><capital letters>, like 16A or 5F (case sensitive)`\n    );\n  }\n\n  return [numbersRegex.exec(str)[0], lettersRegex.exec(str)[0]];\n}\n\nconst getCharScore = str =>\n  str\n    .split(\"\")\n    .map((char, index) => char.charCodeAt(0) * 10 ** index)\n    .reduce((acc, score) => acc + score);\n\nfunction sorter(a, b) {\n  let aOrder, bOrder;\n\n  if (a.attributes && a.attributes.order) {\n    aOrder = a.attributes.order;\n    bOrder = b.attributes.order;\n  } else {\n    aOrder = a.order;\n    bOrder = b.order;\n  }\n\n  const [aSec, aSub] = splitSections(aOrder);\n  const [bSec, bSub] = splitSections(bOrder);\n\n  // sections first\n  if (aSec !== bSec) {\n    return aSec - bSec;\n  }\n\n  // subsections next\n  return getCharScore(aSub) - getCharScore(bSub);\n}\n\nmodule.exports.splitSections = splitSections;\nmodule.exports.sorter = sorter;\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport Link from \"gatsby-link\";\nimport { graphql } from \"gatsby\";\nimport * as helpers from \"../util/helpers\";\n\nconst sortFn = helpers.sorter;\n\nexport default function Template(props) {\n  let { markdownRemark, allMarkdownRemark } = props.data; // data.markdownRemark holds our post data\n\n  const sections = allMarkdownRemark.edges\n    .map(lesson => lesson.node.frontmatter)\n    .sort(sortFn);\n\n  const { frontmatter, html } = markdownRemark;\n\n  const index = sections.findIndex(el => el.path === frontmatter.path);\n\n  const prevLink =\n    index > 0 ? (\n      <Link sx={{ variant: \"buttons.lesson\" }} to={sections[index - 1].path}>\n        {\"← \" + sections[index - 1].title}\n      </Link>\n    ) : (\n      <div></div>\n    );\n\n  const nextLink =\n    index < sections.length - 1 ? (\n      <Link sx={{ variant: \"buttons.lesson\" }} to={sections[index + 1].path}>\n        {sections[index + 1].title + \" →\"}\n      </Link>\n    ) : (\n      <div></div>\n    );\n\n  return (\n    <div>\n      <div\n        sx={{\n          bg: \"surface\",\n          p: 3,\n          variant: \"containers.surface2\",\n          borderRadius: \"4px\"\n        }}\n      >\n        <h1 sx={{ m: 0 }}>{frontmatter.title}</h1>\n        <h2 sx={{ m: 0 }}>{frontmatter.date}</h2>\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n      </div>\n      <div\n        sx={{\n          display: \"flex\",\n          width: \"100%\",\n          my: 3,\n          justifyContent: \"space-between\"\n        }}\n      >\n        {prevLink}\n        {nextLink}\n      </div>\n    </div>\n  );\n}\n\nexport const pageQuery = graphql`\n  query LessonByPath($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        path\n        title\n        order\n        section\n        description\n      }\n    }\n    allMarkdownRemark(limit: 1000) {\n      edges {\n        node {\n          frontmatter {\n            order\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}