{"componentChunkName":"component---src-templates-lesson-template-js","path":"/state-and-lifecycle-methods","result":{"data":{"markdownRemark":{"html":"<h3 id=\"state\" style=\"position:relative;\"><a href=\"#state\" aria-label=\"state permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State</h3>\n<ul>\n<li>A state is a variable which exists inside a component, that cannot be accessed and modified outside the component and can only be used inside the component.</li>\n<li>Works very similarly to a variable that is declared inside a function that cannot be accessed outside the scope of the function in normal javascript</li>\n<li><code class=\"language-text\">state</code> can be modified using <code class=\"language-text\">this.setState()</code>.</li>\n</ul>\n<blockquote>\n<p>❗️NOTE: <code class=\"language-text\">this.setState()</code> call is asynchronous. It means you won't see the updated value of state just after the <code class=\"language-text\">setState</code> call.</p>\n</blockquote>\n<h3 id=\"commonly-used-lifecycle-methods\" style=\"position:relative;\"><a href=\"#commonly-used-lifecycle-methods\" aria-label=\"commonly used lifecycle methods permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commonly Used Lifecycle Methods</h3>\n<p><em>Before we get into Lifecycle methods, we first need to understand what does <code class=\"language-text\">mounting</code> &#x26; <code class=\"language-text\">unmounting</code> means?</em></p>\n<ul>\n<li>You can think of it as, <code class=\"language-text\">setup</code> and <code class=\"language-text\">cleanup</code>. Simply, <code class=\"language-text\">mounting</code>: adding nodes to the DOM, <code class=\"language-text\">unmounting</code>: removing them from the DOM</li>\n</ul>\n<h5 id=\"render\" style=\"position:relative;\"><a href=\"#render\" aria-label=\"render permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>render()</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"constructor\" style=\"position:relative;\"><a href=\"#constructor\" aria-label=\"constructor permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>constructor()</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// If you don’t initialize state and you don’t bind methods,</span>\n<span class=\"token comment\">// you don’t need to implement a constructor for your React component.</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// you should call super(props) before any other statement.</span>\n  <span class=\"token comment\">// Otherwise, this.props will be undefined in the constructor, which can lead to bugs.</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Don't call this.setState() here!</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// `this` binding. Alternate option is to use es6 arrow functions, to avoid this.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"componentdidmount\" style=\"position:relative;\"><a href=\"#componentdidmount\" aria-label=\"componentdidmount permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>componentDidMount()</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">componentDidMount()</code></pre></div>\n<ul>\n<li><code class=\"language-text\">componentDidMount()</code> is invoked immediately after a component is mounted (inserted into the tree).</li>\n<li>If you need to load data from a remote endpoint, this is a good place to instantiate the network request.</li>\n</ul>\n<blockquote>\n<p>❗️NOTE: Keep the last point in mind, we will make use of it in upcoming section.</p>\n</blockquote>\n<h5 id=\"componentdidupdate\" style=\"position:relative;\"><a href=\"#componentdidupdate\" aria-label=\"componentdidupdate permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>componentDidUpdate()</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">componentDidUpdate(prevProps, prevState)</code></pre></div>\n<ul>\n<li><code class=\"language-text\">componentDidUpdate()</code> is invoked immediately after updating occurs. <em>This method is not called for the initial render</em>.</li>\n</ul>\n<h5 id=\"componentwillunmount\" style=\"position:relative;\"><a href=\"#componentwillunmount\" aria-label=\"componentwillunmount permalink\" class=\"header-link before\"><svg aria-hidden=\"true\" fill=\"currentColor\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>componentWillUnmount()</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">componentWillUnmount()</code></pre></div>\n<ul>\n<li><code class=\"language-text\">componentWillUnmount()</code> is invoked immediately before a component is <strong>unmounted</strong> and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in <code class=\"language-text\">componentDidMount()</code>.</li>\n<li>You should not call <code class=\"language-text\">setState()</code> in <code class=\"language-text\">componentWillUnmount()</code> because the component will never be re-rendered. Once a component instance is unmounted, it will never be mounted again.</li>\n</ul>\n<blockquote>\n<p>💡 TLDR: Every <code class=\"language-text\">state</code> change will leads to an re-render of the application to reflect that particular change.</p>\n</blockquote>","frontmatter":{"path":"/state-and-lifecycle-methods","title":"State & Lifecycle methods","order":"2I","section":"React Bootcamp","description":"React bootcamp @GirlScript-Gujarat Summit by Darsh Shah."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"2D","path":"/basic-react-app","title":"Basic React app using Pure JavaScript"}}},{"node":{"frontmatter":{"order":"2L","path":"/build-counter-app","title":"Building a Counter app"}}},{"node":{"frontmatter":{"order":"2H","path":"/components-and-props","title":"Components & Props"}}},{"node":{"frontmatter":{"order":"2M","path":"/data-fetching","title":"Data fetching in React"}}},{"node":{"frontmatter":{"order":"2N","path":"/final-thoughts","title":"Final Thoughts"}}},{"node":{"frontmatter":{"order":"2C","path":"/getting-started","title":"Getting Started"}}},{"node":{"frontmatter":{"order":"2H","path":"/intro-to-cra","title":"Intro to create-react-app"}}},{"node":{"frontmatter":{"order":"2F","path":"/intro-to-jsx","title":"Introducing JSX"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction "}}},{"node":{"frontmatter":{"order":"1B","path":"/overview","title":"Course Overview"}}},{"node":{"frontmatter":{"order":"2J","path":"/props-vs-state","title":"Props vs State"}}},{"node":{"frontmatter":{"order":"2G","path":"/rendering-elements","title":"Rendering Elements"}}},{"node":{"frontmatter":{"order":"1C","path":"/setup","title":"Setup"}}},{"node":{"frontmatter":{"order":"2I","path":"/state-and-lifecycle-methods","title":"State & Lifecycle methods"}}},{"node":{"frontmatter":{"order":"2K","path":"/virtual-dom-in-react","title":"Concept of Virtual DOM in React"}}},{"node":{"frontmatter":{"order":"2B","path":"/what-is-react","title":"What is React"}}},{"node":{"frontmatter":{"order":"2A","path":"/what-you-will-learn","title":"What you'll learn"}}},{"node":{"frontmatter":{"order":"2C","path":"/why-react","title":"Why React?"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}